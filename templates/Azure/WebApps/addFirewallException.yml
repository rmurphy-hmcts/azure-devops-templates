parameters:
  - name: subscription
    type: string
  - name: appName
    type: string
  - name: resourceGroupName
    type: string
  - name: appSlotName
    type: string
    default: ""
  - name: ruleName
    type: string
  - name: condition
    type: string
    default: always() 

steps:
  - task: AzureCLI@2
    displayName: Add FW Exception ${{ parameters.ruleName }} from ${{ parameters.appName }}
    condition: ${{ parameters.condition }}
    ${{ if gt(length(format('{0}',app.resourcegroup)), 0) }}:
      displayName: Add FW Exception ${{ app.name }}
    ${{ if ne(true, gt(length(format('{0}',app.resourcegroup)), 0)) }}:
      displayName: Add FW Exception ${{ app }}

    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
       $ErrorActionPreference = "Continue"
        while ( !$ip ) { $ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content }

        az webapp config access-restriction add -g $env:dependentResourceGroup -n $env:dependentResourceName --rule-name $env:BUILD_BUILDID --action Allow --ip-address $ip/32 --priority 200
        
        $ready = $false; $retry = 0
        while($ready -eq $false -and $retry -lt 10) {
          sleep (10 * $retry++)
          if([string]::IsNullOrWhitespace($env:dependentHealthEndpoint)) {
            sleep 60
            $ready = $true
          } else {
            try {
              write-host "checking health of $env:dependentHealthEndpoint"
              $output = Invoke-RestMethod $env:dependentHealthEndpoint
              write-host ($output | convertto-json -depth 3)
              $ready = $true
            } catch {
              $ready = $false
            }
          }
        }
